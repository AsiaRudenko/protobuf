using BenchmarkDotNet.Attributes;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using GenRequest = Provided.Namespace.SearchRequest;

namespace Zenserdes.Protobuf.Benchmarks
{
	/// <summary>
	/// This benchmark is the benchmark results from the first auto generated code.
	/// The goal is to have TryMemory reach peak performance, at 33 nanoseconds.
	/// <para>
	/// |    Method | LongRetention |      Mean |    Error |   StdDev |
	/// |---------- |-------------- |----------:|---------:|---------:|
	/// | TryMemory |         False |  73.61 ns | 0.650 ns | 0.608 ns |
	/// |   TrySpan |         False | 122.35 ns | 0.900 ns | 0.798 ns |
	/// | TryStream |         False | 363.41 ns | 4.745 ns | 4.439 ns |
	/// |    Memory |         False |  81.50 ns | 1.221 ns | 1.142 ns |
	/// |      Span |         False | 117.68 ns | 0.813 ns | 0.760 ns |
	/// |    Stream |         False | 364.07 ns | 3.855 ns | 3.606 ns |
	/// | TryMemory |          True |  93.63 ns | 1.177 ns | 1.101 ns |
	/// |   TrySpan |          True | 128.55 ns | 2.484 ns | 2.658 ns |
	/// | TryStream |          True | 377.13 ns | 7.283 ns | 6.456 ns |
	/// |    Memory |          True |  95.17 ns | 1.307 ns | 1.222 ns |
	/// |      Span |          True | 127.48 ns | 2.308 ns | 2.159 ns |
	/// |    Stream |          True | 374.73 ns | 3.136 ns | 2.934 ns |
	/// </para>
	/// </summary>
	public class AutoGeneratedCodeBenchmark
	{
		private static ReadOnlyMemory<byte> _payload = new ReadOnlyMemory<byte>(PseudoMessageBenchmarks.Payload);

		[Params(true, false)]
		public bool LongRetention { get; set; }

		[Benchmark]
		public GenRequest TryMemory()
		{
			var success = ZenserdesProtobuf.TryDeserialize<GenRequest>(_payload, out var result, LongRetention);
			return result;
		}

		[Benchmark]
		public GenRequest TrySpan()
		{
			var success = ZenserdesProtobuf.TryDeserialize<GenRequest>(_payload.Span, out var result, LongRetention);
			return result;
		}

		[Benchmark]
		public GenRequest TryStream()
		{
			using (var memoryStream = new MemoryStream(PseudoMessageBenchmarks.Payload))
			{
				var success = ZenserdesProtobuf.TryDeserialize<GenRequest>(memoryStream, out var result, LongRetention);
				return result;
			}
		}

		[Benchmark]
		public GenRequest Memory()
		{
			return ZenserdesProtobuf.Deserialize<GenRequest>(_payload, LongRetention);
		}

		[Benchmark]
		public GenRequest Span()
		{
			return ZenserdesProtobuf.Deserialize<GenRequest>(_payload.Span, LongRetention);
		}

		[Benchmark]
		public GenRequest Stream()
		{
			using (var memoryStream = new MemoryStream(PseudoMessageBenchmarks.Payload))
			{
				return ZenserdesProtobuf.Deserialize<GenRequest>(memoryStream, LongRetention);
			}
		}
	}
}

/*
syntax = "proto3";
option csharp_namespace = "SomeName.Space";

message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 result_per_page = 3;
}
 */

// <auto-generated>
// This code was generated with Zenserdes.Protobuf.ZGen
// The code generated here will only work with Zenserdes.Protobuf 1.*.*
// See the Zenserdes.Protobuf project on github: https://github.com/Zenserdes/protobuf/tree/master/csharp
// </auto-generated>

namespace Provided.Namespace
{
	public partial struct SearchRequest : global::Zenserdes.Protobuf.IMessageAndOperator<global::Provided.Namespace.SearchRequest>
	{
		/// <summary>
		/// Index: 1
		/// </summary>
		public global::System.ReadOnlyMemory<byte> Query { get; set; }

		/// <summary>
		/// Index: 2
		/// </summary>
		public int PageNumber { get; set; }

		/// <summary>
		/// Index: 3
		/// </summary>
		public int ResultPerPage { get; set; }

		public int SizeHint => 256; // TODO: calculate a good size hint

		bool global::Zenserdes.Protobuf.IMessage.Serialize(global::Zenserdes.Protobuf.Serialization.SpanScriber target)
		{
			throw new global::System.NotImplementedException();
		}

		bool global::Zenserdes.Protobuf.IMessage.Serialize(global::Zenserdes.Protobuf.Serialization.MemoryScriber target)
		{
			throw new global::System.NotImplementedException();
		}

		void global::Zenserdes.Protobuf.IMessage.Serialize(global::Zenserdes.Protobuf.Serialization.StreamScriber target)
		{
			throw new global::System.NotImplementedException();
		}

		ulong global::Zenserdes.Protobuf.IMessageOperator<global::Provided.Namespace.SearchRequest>.ExactSize(in global::Provided.Namespace.SearchRequest message)
		{
			throw new global::System.NotImplementedException();
		}

		ulong global::Zenserdes.Protobuf.IMessageOperator<global::Provided.Namespace.SearchRequest>.ExactSize(global::Provided.Namespace.SearchRequest message)
		{
			throw new global::System.NotImplementedException();
		}

		bool global::Zenserdes.Protobuf.IMessageOperator<global::Provided.Namespace.SearchRequest>.TryDeserialize<TBufferWriter>(ref global::Zenserdes.Protobuf.Serialization.SpanDataStreamer<TBufferWriter> dataStreamer, ref global::Provided.Namespace.SearchRequest instance)
		{
			byte wireByte = default;
			global::System.Span<byte> temp = stackalloc byte[10];

			while (dataStreamer.Next(ref wireByte))
			{
				switch (wireByte)
				{
					case 0b00001_010:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						if (!dataStreamer.ReadPermanent((int)result, out var memory))
						{
							return false;
						}

						instance.Query = memory;
					}
					break;

					case 0b00010_000:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						instance.PageNumber = (int)result;
					}
					break;

					case 0b00011_000:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						instance.ResultPerPage = (int)result;
					}
					break;
				}
			}

			return true;
		}

		bool global::Zenserdes.Protobuf.IMessageOperator<global::Provided.Namespace.SearchRequest>.TryDeserialize<TBufferWriter>(ref global::Zenserdes.Protobuf.Serialization.MemoryDataStreamer<TBufferWriter> dataStreamer, ref global::Provided.Namespace.SearchRequest instance)
		{
			byte wireByte = default;
			global::System.Span<byte> temp = stackalloc byte[10];

			while (dataStreamer.Next(ref wireByte))
			{
				switch (wireByte)
				{
					case 0b00001_010:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						if (!dataStreamer.ReadPermanent((int)result, out var memory))
						{
							return false;
						}

						instance.Query = memory;
					}
					break;

					case 0b00010_000:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						instance.PageNumber = (int)result;
					}
					break;

					case 0b00011_000:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						instance.ResultPerPage = (int)result;
					}
					break;
				}
			}

			return true;
		}

		bool global::Zenserdes.Protobuf.IMessageOperator<global::Provided.Namespace.SearchRequest>.TryDeserialize<TBufferWriter>(ref global::Zenserdes.Protobuf.Serialization.StreamDataStreamer<TBufferWriter> dataStreamer, ref global::Provided.Namespace.SearchRequest instance)
		{
			byte wireByte = default;
			global::System.Span<byte> temp = stackalloc byte[10];

			while (dataStreamer.Next(ref wireByte))
			{
				switch (wireByte)
				{
					case 0b00001_010:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						if (!dataStreamer.ReadPermanent((int)result, out var memory))
						{
							return false;
						}

						instance.Query = memory;
					}
					break;

					case 0b00010_000:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						instance.PageNumber = (int)result;
					}
					break;

					case 0b00011_000:
					{
						dataStreamer.MaybeReadWorkaround(10).CopyTo(temp);

						var offset = 0;
						var result = 0u;
						if (!global::Zenserdes.Protobuf.Serialization.DataDecoder.TryReadVarint32(temp, ref offset, ref result))
						{
							return false;
						}

						dataStreamer.Advance(offset);
						instance.ResultPerPage = (int)result;
					}
					break;
				}
			}

			return true;
		}

	}
}
